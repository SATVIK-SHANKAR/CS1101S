function insert(bst, item) {
  // your solution goes here
  function insert_helper(bst, item) {
    return is_empty_tree(bst)
      ? make_tree(item, null, null)
      : item < entry(bst)
      ? make_tree(
          entry(bst),
          insert_helper(left_branch(bst), item),
          right_branch(bst)
        )
      : make_tree(
          entry(bst),
          left_branch(bst),
          insert_helper(right_branch(bst), item)
        );
  }

  return insert_helper(bst, item);
}


// Copy your binary_search_tree_to_string function here from Task 1.
function binary_search_tree_to_string(bst) {
  // Your answer here
  return is_empty_tree(bst)
    ? ""
    : binary_search_tree_to_string(left_branch(bst)) +
        entry(bst) +
        "; " +
        binary_search_tree_to_string(right_branch(bst));
}

// Test

binary_search_tree_to_string(insert(make_empty_tree(), "x"));
// Should produce "x; "

const bst = accumulate((item, bst) => insert(bst, item),
                      make_empty_tree(),
                      list("g", "a", "r", "x", "p"));
binary_search_tree_to_string(bst);
// Should produce "a; g; p; r; x; "

const cadet_names_with_aaaaron =  insert(cadet_names, "AAAARON NORAAAA");
binary_search_tree_to_string(cadet_names_with_aaaaron);
// Should produce "AAAARON NORAAAA; ..."
